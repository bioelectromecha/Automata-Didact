{
	"subjects":
	[
		{
			"title": "Alphabet",
			"explanations":
			[
				{
					"explanation": "An alphabet is any finite, non-empty, set of characters or symbols"
				},
				{
					"explanation": "The greek symbol ‚àë (sigma) is used to denote an alphabet"
				}
			],
			"examples":
			[
				{
					"title": "Binary Alphabet",
					"example": "‚àë={0,1}",
					"description": ""
				},
				{
					"title": "The English Alphabet",
					"example": "‚àë={a,b,c,.......,x,y,z}",
					"description":"The 26 lowercase letters of the English alphabet"
				},
				{
					"title": "DNA",
					"example": "‚àë={A,C,G,T}"
				}
			]
		},
		{
			"title": "Strings",
			"explanations":
			[
				{
					"explanation": "A string (also known as a word) from an alphabet Œ£ is a finite sequence of characters from Œ£"
				},
				{
					"explanation": "A word is denoted as w. We write the string represented by w without quotation marks"
				}
			],
			"examples":
			[
				{
					"title": "Binary Sequence",
					"example": "w = 010111010101110",
					"description": "a word over an alphabet ‚àë={0,1}"
				},
				{
					"title": "English Word",
					"example": "w = hello",
					"description":"a word over the alphabet ‚àë={a,b,c,.......,x,y,z}"
				},
				{
					"title": "DNA Codon",
					"example": "w=TTC",
					"description":"a word over the alphabet ‚àë={A,C,G,T}"
				}
			]
		},
		{
			"title": "Empty String",
			"explanations":
			[
				{
					"explanation": "The empty string is a string containing no characters. It has equal standing with all other words in the language"
				},
				{
					"explanation": "The empty string is denoted as Œµ (greek epsilon)"
				}
			],
			"examples":
			[
				{
					"title": "Example",
					"example": "w = Œµ",
					"description": "A word containing no characters"
				}
			]
		},
		{
			"title": "String Length",
			"explanations":
			[
				{
					"explanation": "The length of a string w is the number of characters which are not equal to Œµ"
				},
				{
					"explanation": "The length of a string is denoted by |w|"
				}
			],
			"examples":
			[
				{
					"title": "Example 1",
					"example": "If w = 0110, then |w|=4",
					"description": ""
				},
				{
					"title": "Example 1",
					"example": "If w = heŒµŒµŒµllo, then |w|=5",
					"description":"Because heŒµŒµŒµllo=hello"
				},
				{
					"title": "Example 3",
					"example": "If w=ŒµŒµŒµŒµŒµŒµ, then |w|=0",
					"description":"Because ŒµŒµŒµŒµŒµŒµ=Œµ "
				}
			]
		},
		{
			"title": "String Concatenation",
			"explanations":
			[
				{
					"explanation": "A concatenation of two strings creates a new string"
				},
				{
					"explanation": "A concatenation of two strings w‚ÇÅ and w‚ÇÇ is denoted as w‚ÇÅw‚ÇÇ"
				}
			],
			"examples":
			[
				{
					"title": "Example 1",
					"example": "If w‚ÇÅ=01 and w‚ÇÇ=110, then w‚ÇÅw‚ÇÇ=01110",
					"description": ""
				},
				{
					"title": "Example 1",
					"example": "If w‚ÇÅ=abc and w‚ÇÇ=defg, then w‚ÇÅw‚ÇÇ=abcdefg",
					"description":""
				},
				{
					"title": "Example 3",
					"example": "If w‚ÇÅ=ACTT and w‚ÇÇ=ŒµŒµŒµŒµŒµŒµ, then w‚ÇÅw‚ÇÇ=ACTT",
					"description":"Concatenating a string with Œµ doesn't change the string"
				}
			]
		},
		{
			"title": "Substring",
			"explanations":
			[
				{
					"explanation": "The string w‚ÇÅ is a substing of w, if the whole of w‚ÇÅ is contained inside w"
				}
			],
			"examples":
			[
				{
					"title": "Example 1",
					"example": "If w‚ÇÅ=abcd and w=abcdefgh, then w‚ÇÅ is a substring of w",
					"description": ""
				},
				{
					"title": "Example 2",
					"example": "If w‚ÇÅ=abcd and w=abcefgh, then w‚ÇÅ is not a substring of w",
					"description":"w‚ÇÅ is not contained contiguously inside w"
				},
				{
					"title": "Example 3",
					"example": "If w‚ÇÅ=Œµ and w=abcefgh, then w‚ÇÅ is a substring of w",
					"description":"the empty string Œµ is a substring of all strings"
				}
			]
		},
		{
			"title": "Suffix and Prefix",
			"explanations":
			[
				{
					"explanation": "The string w‚ÇÅ is a suffix of w, if w‚ÇÅ is a substring that appears at the end of w"
				},
				{
					"explanation": "Similarly, w‚ÇÅ is a prefix of w‚ÇÅ if it appears at the start of w"
				}
			],
			"examples":
			[
				{
					"title": "Suffix",
					"example": "If w‚ÇÅ=abcd and w=klmabcd, then w‚ÇÅ is a suffix of w",
					"description": ""
				},
				{
					"title": "Prefix",
					"example": "If w‚ÇÅ=abcd and w=abcdlmln, then w‚ÇÅ is a prefix of w",
					"description":""
				},
				{
					"title": "Prefix and Suffix",
					"example": "If w‚ÇÅ=abcd and w=abcdabcd, then w‚ÇÅ both a prefix and suffix w",
					"description":""
				},
				{
					"title": "A String and Itself",
					"example": "If w‚ÇÅ=abcd and w=w",
					"description":"A string is both a substring, suffix, and prefix if itself"
				},
				{
					"title": "The Empty String",
					"example": "If w‚ÇÅ=Œµ",
					"description":"The empty string Œµ is both a substring, suffix, and prefix of any string"
				}
			]
		},
		{
			"title": "Suffix and Prefix",
			"explanations":
			[
				{
					"explanation": "The string w‚ÇÅ is a suffix of w, if w‚ÇÅ is a substring that appears at the end of w"
				},
				{
					"explanation": "Similarly, w‚ÇÅ is a prefix of w‚ÇÅ if it appears at the start of w"
				}
			],
			"examples":
			[
				{
					"title": "Suffix",
					"example": "If w‚ÇÅ=abcd and w=klmabcd, then w‚ÇÅ is a suffix of w",
					"description": ""
				},
				{
					"title": "Prefix",
					"example": "If w‚ÇÅ=abcd and w=abcdlmln, then w‚ÇÅ is a prefix of w",
					"description":""
				},
				{
					"title": "Prefix and Suffix",
					"example": "If w‚ÇÅ=abcd and w=abcdabcd, then w‚ÇÅ both a prefix and suffix w",
					"description":""
				},
				{
					"title": "A String and Itself",
					"example": "If w‚ÇÅ=abcd and w=w",
					"description":"A string is both a substring, suffix, and prefix if itself"
				},
				{
					"title": "The Empty String",
					"example": "If w‚ÇÅ=Œµ",
					"description":"The empty string Œµ is both a substring, suffix, and prefix of any string"
				}
			]
		},
		//TODO: move this to after languages
		{
			"title": "Power of an Alphabet",
			"explanations":
			[
				{
					"explanation": "The power of an alphabet ‚àë·µè, is the set of all strings of length k"
				}
			],
			"examples":
			[
				{
					"title": "Example 1",
					"example": "If ‚àë={0,1} then ‚àë¬≤={00,01,10,11}",
					"description": "The set of all strings of length 2 from the binary alphabet"
				},
				{
					"title": "Example 2",
					"example": "If ‚àë={a,b,....,z} then |‚àë¬≥|=26¬≥",
					"description":"There are 26¬≥ sets of length 3 over the lowercase english alphabet"
				}
			]
		},
		{
			"title": "Languages",
			"explanations":
			[
				{
					"explanation": "A language is a set of strings over an alphabet Œ£. Languages can be finite or infinite."
				},
				{
					"explanation": "Languages are usually denoted with set notation"
				}
			],
			"examples":
			[
				{
					"title": "Binary Language",
					"example": "The binary language L={0,1,01,10,11,.....} is the set of all strings over the alphabet Œ£ = {0,1}",
					"description": ""
				},
				{
					"title": "Set Notation",
					"example": "L={w|w‚àä{a,b,c,d} and //(//frac{|w|}{2}//in//mathbb{N}//)",
					"description":""
				},
				{
					"title": "The Empty Language",
					"example": "The language L={Œµ} contains a single string, which is the empty string Œµ",
					"description":""
				}
			]
		}
	]
}

	A language is a set of strings. One special language is Œ£ ‚àó , which is the set of all possible strings generated
	over the alphabet Œ£ ‚àó . For example, if
	Œ£ = {a, b, c}
	then
	Œ£ ‚àó = {…õ, a, b, c, aa, ab, ac, ba, . . . , aaaaaabbbaababa, . . .} .
	Namely, Œ£ ‚àó is the ‚Äúfull‚Äù language made of characters of Œ£. Naturally, any language over Œ£ is going to be
	a subset of Œ£ ‚àó .
	Example 2.1.2 The following is a language
	L = {b, ba, baa, baaa, baaaa, ...} .
	Now, is the following a language?
	{aa, ab, ba, } .
	Sure ‚Äì it is not a very ‚Äúinteresting‚Äù language because its finite, but its definitely a language.
	How about {aa, ab, ba, ‚àÖ}. Is this a language? No! Because ‚àÖ is no a valid string (which comes to
	demonstrate that the empty word  and ‚àÖ are not the same creature, and they should be treated differently.
	Lexicographic ordering of a set of strings is an ordering of strings that have shorter strings first, and
	sort the strings alphabetically within each length. Naturally, we assume that we have an order on the given
	alphabet.
	Thus, for Œ£ = {a, b}, the Lexicographic ordering of Œ£ ‚àó is
	, a, b, aa, ab, ba, bb, aaa, aab, . . . .
}
}
	Most of the time it would be more useful to use set notations to define a language; that is, define a language
	by the property the strings in this language posses.
	For example, consider the following set of strings
	n 
	o
	
	‚àó
	L 1 = x  x ‚àà {a, b} and |x| is even .
	In words, L 1 is the language of all strings made out of a, b that have even length.
	Next, consider the following set
	n 
	o
	
	L 2 = x  there is a w such that xw = illinois .
	So L 2 is the language made out of all prefixes of L 2 . We can write L 2 explicitly, but its tedious. Indeed,
	L 2 = {, i, il, ill, illi, illin, illino, illinoi, illinois} .
}
}
	Why should we care about languages?
	Consider the language L primes that contains all strings over Œ£ = {0, 1, . . . , 9} which are prime numbers. If
	we can build a fast computer program (or an automata) that can tell us whether a string s (i.e., a number)
	is in L primes , then we decide if a number is prime or not. And this is a very useful program to have, since
	most encryption schemes currently used by computers (i.e., RSA) rely on the ability to find very large prime
	numbers.
	Let us state it explicitly: The ability to decide if a word is in a spe-
	cific language (like L primes ) is equivalent to performing a computational
	Yes
	task (which might be extremely non-trivial). You can think about this
	Input Program decide-
	schematically, as a program that gets as input a number (i.e., string made
	ing if ihe input is
	out of digits), and decides if it is prime or not. If the input is a prime
	a prime number. No
	number, it outputs Yes and otherwise it outputs No. See figure on the
	right.

	/* illustration on page 23 */
}
}
	A finite deterministic automata is a 5 component vector:
	1) omega - states
	2) sigma - alphabet
	3) q0 - initial state
	4) delta - transition function
	5) F - receiving states

	the automata defines a language - the language genetated by use of automata A is the sequence of letters
	which lead the automata to a receiving state.

	delta^ is the expansion of delta to words.
}
